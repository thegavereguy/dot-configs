"Plugin di Plug

call plug#begin('~/.config/nvim/plugged')

"Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}

Plug 'scrooloose/nerdtree'	"Albero file laterale

Plug 'tiagofumo/vim-nerdtree-syntax-highlight'	"SH per Nertree

Plug 'ryanoasis/vim-devicons'	"Icone per Nerdtree

"Temi

Plug 'morhetz/gruvbox'		
Plug 'jacoborus/tender.vim'
Plug 'glepnir/oceanic-material'
Plug 'ntk148v/vim-horizon'
Plug 'sonph/onehalf', { 'rtp': 'vim' }

"Plug 'itchyny/lightline.vim'
Plug 'nvim-lualine/lualine.nvim'

Plug 'kyazdani42/nvim-web-devicons'

"LS

Plug 'neovim/nvim-lspconfig'
"Plug 'williamboman/nvim-lsp-installer'
Plug 'williamboman/mason.nvim'
Plug 'williamboman/mason-lspconfig.nvim'

"debugger protocol
Plug 'mfussenegger/nvim-dap' 

"linter
Plug 'jose-elias-alvarez/null-ls.nvim'
Plug 'mfussenegger/nvim-lint'


Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-vsnip'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-buffer'

Plug 'kdheepak/lazygit.nvim'
Plug 'f-person/git-blame.nvim'

"Pluglin per salvere file come root
Plug 'chrisbra/sudoedit.vim'

"autochiusura parentesi
Plug 'jiangmiao/auto-pairs'

Plug 'lukas-reineke/lsp-format.nvim'
Plug 'mhartington/formatter.nvim'
call plug#end()


"VARIABILI

set number
set modifiable
set encoding=utf-8
set hidden
set nobackup
set nowritebackup
set noshowmode
syntax on
set cursorline
set tabstop=2
set shiftwidth=2


set cmdheight=1		""rimettere 2 se ci sono problemi con testi

set updatetime=300

"Impostazione per il popup del completamento
set completeopt=menuone,preview,noinsert,noselect

let g:AutoPairsFlyMode = 1

"Imposta il tema
colorscheme horizon

if (has("termguicolors"))
 set termguicolors
endif

if !has('gui_running')
  set t_Co=256
endif	

lua << EOF

require("lsp-format").setup {}
require "lspconfig".gopls.setup { on_attach = require "lsp-format".on_attach  }

EOF
" :map <F2> :echo 'Current time is ' . strftime('%c')<CR>
" :map! <F3> <C-R>=strftime('%c')<CR>
" nnoremap <silent> <F2> :lchdir %:p:h<CR>:pwd<CR>
" :nnoremap <F5> :grep <C-R><C-W> ~<CR>
" :nnoremap ,b :ls<CR>:buffer<Space>

"Cofigurazone mason - installer lsp-servers
lua << EOF
require("mason").setup()
EOF

"configurazione vari lsp
"clang
lua << EOF
require('lspconfig').clangd.setup{}
EOF
" 
" CONFIGURAZIONE RUST-COMPLETAMENTO

" Configure LSP through rust-tools.nvim plugin.
" rust-tools will configure and enable certain LSP features for us.
" See https://github.com/simrat39/rust-tools.nvim#configuration

"lua <<EOF
"local nvim_lsp = require'lspconfig'
"local opts = {
""    tools = { -- rust-tools options
"        autoSetHints = true,
"        hover_with_actions = true,
"        inlay_hints = {
"            show_parameter_hints = true,
"            parameter_hints_prefix = "",
"            other_hints_prefix = "",
"        },
"    },
"
"    -- all the opts to send to nvim-lspconfig
"    -- these override the defaults set by rust-tools.nvim
"    -- see https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer
"    server = {
"        -- on_attach is a callback called when the language server attachs to the buffer
"        -- on_attach = on_attach,
"        settings = {
"            -- to enable rust-analyzer settings visit:
"            -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc
"            ["rust-analyzer"] = {
"                -- enable clippy on save
"                checkOnSave = {
"                    command = "clippy"
"                },
"            }
"        }
"    },
"}
"
"require('rust-tools').setup(opts)
"EOF
"
"lua << END
"require'lspconfig'.eslint.setup{}
"END
"
" Setup Completion
" See https://github.com/hrsh7th/nvim-cmp#basic-configuration
" Use tab for trigger completion with characters ahead and navigate.
lua <<EOF
local cmp = require'cmp'
cmp.setup({
  -- Enable LSP snippets
--  snippet = {
  --  expand = function(args)
    --    vim.fn["vsnip#anonymous"](args.body)
   -- end,
 -- },
  mapping = {
    ['<C-k>'] = cmp.mapping.select_prev_item(),
    ['<C-j>'] = cmp.mapping.select_next_item(),
    -- Add tab support
    ['<S-Tab>'] = cmp.mapping.select_prev_item(),
    ['<Tab>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm({
      behavior = cmp.ConfirmBehavior.Insert,
      select = true,
    })
  },

  -- Installed sources
  sources = {
    { name = 'nvim_lsp' },
	{ name = 'nvim_lsp_document_symbol' }
  },
})

EOF


"Configurazione barra
lua << END
require('lualine').setup{
options = {
    icons_enabled = true,
    theme = 'horizon',
    disabled_filetypes = {},
    always_divide_middle = true,
    globalstatus = false,
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff', 'diagnostics'},
    lualine_c = {'filename'},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  extensions = {}
}
END

"lua << END
"local eslint = require("eslint")
"
"eslint.setup({
"  bin = 'eslint_d', -- or `eslint_d`
"  code_actions = {
"    enable = true,
"    apply_on_save = {
"      enable = true,
"      types = { "problem" }, -- "directive", "problem", "suggestion", "layout"
"    },
"    disable_rule_comment = {
"      enable = true,
"      location = "separate_line", -- or `same_line`
"    },
"  },
"  diagnostics = {
"    enable = true,
"    report_unused_disable_directives = false,
"    run_on = "type", -- or `save`
"  },
"})
"
"END

"REMAPS

" questi sono per muoversi normalmente anche in righe che vanno a capo
:nnoremap k gk		
:nnoremap j gj

" Code navigation shortcuts

nnoremap <n> :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTreeToggle <bar> :NERDTreeRefreshRoot<CR>

tnoremap <ESC> <C-\><C-n>

:nnoremap <C-p> "+p

nnoremap <silent> <leader>gg :LazyGit<CR>

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

" autocmd BufWritePost <buffer> lua vim.lsp.buf.formatting()
